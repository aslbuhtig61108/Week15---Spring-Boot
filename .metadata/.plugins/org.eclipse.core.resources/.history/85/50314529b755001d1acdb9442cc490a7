package com.promineotech.jeep.controller;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.params.provider.Arguments.arguments;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlConfig;
import com.promineotech.jeep.Constants;
import com.promineotech.jeep.controller.support.FetchJeepTestSupport;
import com.promineotech.jeep.entity.Jeep;
import com.promineotech.jeep.entity.JeepModel;
import lombok.Getter;


class FetchJeepTest extends FetchJeepTestSupport {

  @Nested
  @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
  @ActiveProfiles("test")
  @Sql(scripts = {"classpath:flyway/migrations/V1.0__Jeep_Schema.sql",
      "classpath:flyway/migrations/V1.1__Jeep_Data.sql"}, config = @SqlConfig(encoding = "utf-8"))
  class TestThatDoNotPolluteTheApplicationContext extends FetchJeepTestSupport {

  }
  
  @Nested
  @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
  @ActiveProfiles("test")
  @Sql(scripts = {"classpath:flyway/migrations/V1.0__Jeep_Schema.sql",
      "classpath:flyway/migrations/V1.1__Jeep_Data.sql"}, config = @SqlConfig(encoding = "utf-8"))
  class TestThatPolluteTheApplicationContext extends FetchJeepTestSupport {

  }

  @Autowired
  @Getter // Not in the W14 coding instructions. Rewatching the videos helped me understand Lombok
          // annotations
  private TestRestTemplate restTemplate;

  @LocalServerPort
  private int serverPort;

  protected String getBaseUri() {
    return String.format("http://localhost:%d/jeeps", serverPort);
  }

  @Test
  void testThatJeepAreReturnedWhenAValidModelAndTrimAreSupplied() {

    // Given: a valid model, trim, and URI
    JeepModel model = JeepModel.WRANGLER;
    String trim = "Sport";
    String uri = String.format("%s?model=%s&trim=%s", getBaseUri(), model, trim);
    // String.format("http://localhost:%d/jeeps?model=%s&trim=%s", serverPort, model, trim); // W15
    // Reading Data with Spring ts@24:43

    // When: a connection is made to he URI
    ResponseEntity<List<Jeep>> response = getRestTemplate().exchange(uri, HttpMethod.GET, null,
        new ParameterizedTypeReference<>() {}); // changed from W13 - #13.a

    // Then: a success (OK or 200) status code is returned
    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK); // From W13 Coding #13.b

    // And: the actual list returned is the same as the expected list
    List<Jeep> actual = response.getBody();
    List<Jeep> expected = buildExpected();

    // actual.forEach(jeep -> jeep.setModelPK(null));

    // Used to see the toString() looks like
    // System.out.println(expected);
    assertThat(actual).isEqualTo(expected);
  }

  @Test
  void testThatAnErrorMessageIsReturnedWhenAnUnknownTrimIsSupplied() {

    // Given: a valid model, an unknown trim value, and URI
    JeepModel model = JeepModel.WRANGLER;
    String trim = "Unknown Value";
    String uri = String.format("%s?model=%s&trim=%s", getBaseUri(), model, trim);
    // String.format("http://localhost:%d/jeeps?model=%s&trim=%s", serverPort, model, trim); // W15
    // Reading Data with Spring ts@24:43

    // When: a connection is made to he URI
    ResponseEntity<Map<String, Object>> response = getRestTemplate().exchange(uri, HttpMethod.GET,
        null, new ParameterizedTypeReference<>() {}); // changed from W13 - #13.a

    // Then: a not found (404) status code is returned
    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND); // From W13 Coding #13.b

    // And: an error message is returned
    Map<String, Object> error = response.getBody();

    assertErrorMessageValid(error, HttpStatus.NOT_FOUND);
  }

  @ParameterizedTest
  @MethodSource("com.promineotech.jeep.controller.FetchJeepTest#parametersForInvalidInput")
  void testThatAnErrorMessageIsReturnedWhenAnInvalidValueIsSupplied(String model, String trim,
      String reason) {

    // Given: an invalid model, trim, and URI
    String uri = String.format("%s?model=%s&trim=%s", getBaseUri(), model, trim);
    // String.format("http://localhost:%d/jeeps?model=%s&trim=%s", serverPort, model, trim); // W15
    // Reading Data with Spring ts@24:43

    // When: a connection is made to he URI
    ResponseEntity<Map<String, Object>> response = getRestTemplate().exchange(uri, HttpMethod.GET,
        null, new ParameterizedTypeReference<>() {}); // changed from W13 - #13.a

    // Then: a bad request (400) status code is returned
    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.BAD_REQUEST); // From W13 Coding #13.b

    // And: an error message is returned
    Map<String, Object> error = response.getBody();

    assertErrorMessageValid(error, HttpStatus.BAD_REQUEST);
  }

  static Stream<Arguments> parametersForInvalidInput() {
    // @formatter: off
    return Stream.of(arguments("WRANGLER", "@#$%^&&%", "Trim contains non-alphanumeric chars"),
        arguments("WRANGLER", "C".repeat(Constants.TRIM_MAX_LENGTH + 1), "Trim length too long"),
        arguments("INVALID", "Sport", "Model is not enum value"));
    // @formatter: on
  }
}
